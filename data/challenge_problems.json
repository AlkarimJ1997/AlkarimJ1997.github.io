{
    "problems": [
        {
            "id": 1,
            "title": "Add Two Numbers",
            "difficulty": "Easy",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes two numbers as arguments and returns their sum. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "addition(3, 2) ➞ 5",
                "addition(-3, -6) ➞ -9",
                "addition(7, 3) ➞ 10",
                "",
                "Test Cases:",
                "",
                "addition(36, -54)",
                "addition(0, 0)",
                "addition(-5, -5)"
            ],
            "body": {
                "javascript": [
                    "const addition = (a, b) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(addition(36, -54))",
                    "console.log(addition(0, 0))",
                    "console.log(addition(-5, -5))"
                ],
                "python": [
                    "def addition(a, b):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(addition(36, -54))",
                    "print(addition(0, 0))",
                    "print(addition(-5, -5))"
                ],
                "java": [
                    "public class Main {",
                    "    public static int addition(int a, int b) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(addition(36, -54));",
                    "        System.out.println(addition(0, 0));",
                    "        System.out.println(addition(-5, -5));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "",
                    "int addition(int a, int b) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", addition(36, -54));",
                    "    printf(\"%d\\n\", addition(0, 0));",
                    "    printf(\"%d\\n\", addition(-5, -5));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "",
                    "int addition(int a, int b) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << addition(36, -54) << std::endl;",
                    "    std::cout << addition(0, 0) << std::endl;",
                    "    std::cout << addition(-5, -5) << std::endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Addition {",
                    "    public static int addition(int a, int b) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        System.Console.WriteLine(addition(36, -54));",
                    "        System.Console.WriteLine(addition(0, 0));",
                    "        System.Console.WriteLine(addition(-5, -5));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import \"fmt\"",
                    "",
                    "func addition(a int, b int) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(addition(36, -54))",
                    "    fmt.Println(addition(0, 0))",
                    "    fmt.Println(addition(-5, -5))",
                    "}"
                ],
                "ruby": [
                    "def addition(a, b)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts addition(36, -54)",
                    "puts addition(0, 0)",
                    "puts addition(-5, -5)"
                ],
                "swift": [
                    "func addition(_ a: Int, _ b: Int) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(addition(36, -54))",
                    "print(addition(0, 0))",
                    "print(addition(-5, -5))"
                ],
                "php": [
                    "<?php",
                    "function addition($a, $b) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo addition(36, -54);",
                    "echo addition(0, 0);",
                    "echo addition(-5, -5);",
                    "?>"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const addition = (a, b) => a + b"
                    ],
                    "explanation": [
                        "The addition operator (+) adds two numbers together",
                        "ES6 Arrow Syntax is used to define the function",
                        "The return keyword can be omitted for single line arrow functions"
                    ]
                },
                "python": {
                    "solution": [
                        "def addition(a, b):",
                        "    return a + b"
                    ],
                    "explanation": [
                        "The addition operator (+) adds two numbers together",
                        "The return keyword is used to return the result of the function"
                    ]
                }
            },
            "answer": ["-18", "0", "-10"]
        },
        {
            "id": 2,
            "title": "Reverse a String",
            "difficulty": "Easy",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes a string as its argument and returns the string in reversed order. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "reverse(\"hello\") ➞ \"olleh\"",
                "reverse(\"World\") ➞ \"dlroW\"",
                "reverse(\"a\") ➞ \"a\"",
                "",
                "Test Cases:",
                "",
                "reverse(\"Hello World\")",
                "reverse(\"The quick brown fox.\")",
                "reverse(\"Edabit is really helpful!\")"
            ],
            "body": {
                "javascript": [
                    "const reverse = (str) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(reverse(\"Hello World\"));",
                    "console.log(reverse(\"The quick brown fox.\"));",
                    "console.log(reverse(\"Edabit is really helpful!\"));"
                ],
                "python": [
                    "def reverse(str):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(reverse(\"Hello World\"))",
                    "print(reverse(\"The quick brown fox.\"))",
                    "print(reverse(\"Edabit is really helpful!\"))"
                ],
                "java": [
                    "public class Main {",
                    "    public static String reverse(String str) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(reverse(\"Hello World\"));",
                    "        System.out.println(reverse(\"The quick brown fox.\"));",
                    "        System.out.println(reverse(\"Edabit is really helpful!\"));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "",
                    "char* reverse(char* str) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%s\\n\", reverse(\"Hello World\"));",
                    "    printf(\"%s\\n\", reverse(\"The quick brown fox.\"));",
                    "    printf(\"%s\\n\", reverse(\"Edabit is really helpful!\"));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "",
                    "std::string reverse(std::string str) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << reverse(\"Hello World\") << std::endl;",
                    "    std::cout << reverse(\"The quick brown fox.\") << std::endl;",
                    "    std::cout << reverse(\"Edabit is really helpful!\") << std::endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Reverse {",
                    "    public static string reverse(string str) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        System.Console.WriteLine(reverse(\"Hello World\"));",
                    "        System.Console.WriteLine(reverse(\"The quick brown fox.\"));",
                    "        System.Console.WriteLine(reverse(\"Edabit is really helpful!\"));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import \"fmt\"",
                    "",
                    "func reverse(str string) string {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(reverse(\"Hello World\"))",
                    "    fmt.Println(reverse(\"The quick brown fox.\"))",
                    "    fmt.Println(reverse(\"Edabit is really helpful!\"))",
                    "}"
                ],
                "ruby": [
                    "def reverse(str)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts reverse(\"Hello World\")",
                    "puts reverse(\"The quick brown fox.\")",
                    "puts reverse(\"Edabit is really helpful!\")"
                ],
                "swift": [
                    "func reverse(_ str: String) -> String {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(reverse(\"Hello World\"))",
                    "print(reverse(\"The quick brown fox.\"))",
                    "print(reverse(\"Edabit is really helpful!\"))"
                ],
                "php": [
                    "<?php",
                    "function reverse($str) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo reverse(\"Hello World\");",
                    "echo reverse(\"The quick brown fox.\");",
                    "echo reverse(\"Edabit is really helpful!\");",
                    "?>"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const reverse = (str) => {",
                        "    return str.split('').reverse().join('');",
                        "}"
                    ],
                    "explanation": [
                        "The split() method splits a string into an array of substrings by a delimiter",
                        "The reverse() method reverses the order of the elements in an array",
                        "The join() method joins all elements of an array into a string by a delimiter"
                    ]
                },
                "python": {
                    "solution": [
                        "def reverse(str):",
                        "    return str[::-1]"
                    ],
                    "explanation": [
                        "All strings are lists of characters in Python",
                        "List slicing is a technique to access a subset of elements in a list",
                        "The syntax is [start:stop:step]",
                        "If left empty, start defaults to 0, stop defaults to the length of the list, and step defaults to 1",
                        "[::-1] means traverse from the end of the list to the beginning, one element at a time"
                    ]
                }
            },
            "answer": ["olleh", ".xof nworb kciuq ehT", "!lufpleh yllaer si tibadE"]
        },
        {
            "id": 3,
            "title": "Check if an Integer is Divisible By Five",
            "difficulty": "Easy",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that returns true if an integer is evenly divisible by 5, and false otherwise. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "divisibleByFive(6) ➞ false",
                "divisibleByFive(-12) ➞ false",
                "divisibleByFive(10) ➞ true",
                "",
                "Test Cases:",
                "",
                "divisibleByFive(5)",
                "divisibleByFive(-55)",
                "divisibleByFive(37)"
            ],
            "body": {
                "javascript": [
                    "const divisibleByFive = (n) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(divisibleByFive(5));",
                    "console.log(divisibleByFive(-55));",
                    "console.log(divisibleByFive(37));"
                ],
                "python": [
                    "def divisibleByFive(n):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(divisibleByFive(5))",
                    "print(divisibleByFive(-55))",
                    "print(divisibleByFive(37))"
                ],
                "java": [
                    "public class Main {",
                    "    public static boolean divisibleByFive(int n) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(divisibleByFive(5));",
                    "        System.out.println(divisibleByFive(-55));",
                    "        System.out.println(divisibleByFive(37));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "",
                    "int divisibleByFive(int n) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", divisibleByFive(5));",
                    "    printf(\"%d\\n\", divisibleByFive(-55));",
                    "    printf(\"%d\\n\", divisibleByFive(37));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "",
                    "bool divisibleByFive(int n) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << divisibleByFive(5) << std::endl;",
                    "    std::cout << divisibleByFive(-55) << std::endl;",
                    "    std::cout << divisibleByFive(37) << std::endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class DivisibleByFive {",
                    "    public static bool divisibleByFive(int n) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        System.Console.WriteLine(divisibleByFive(5));",
                    "        System.Console.WriteLine(divisibleByFive(-55));",
                    "        System.Console.WriteLine(divisibleByFive(37));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import \"fmt\"",
                    "",
                    "func divisibleByFive(n int) bool {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(divisibleByFive(5))",
                    "    fmt.Println(divisibleByFive(-55))",
                    "    fmt.Println(divisibleByFive(37))",
                    "}"
                ],
                "ruby": [
                    "def divisibleByFive(n)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts divisibleByFive(5)",
                    "puts divisibleByFive(-55)",
                    "puts divisibleByFive(37)"
                ],
                "swift": [
                    "func divisibleByFive(_ n: Int) -> Bool {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(divisibleByFive(5))",
                    "print(divisibleByFive(-55))",
                    "print(divisibleByFive(37))"
                ],
                "php": [
                    "<?php",
                    "function divisibleByFive($n) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo divisibleByFive(5);",
                    "echo divisibleByFive(-55);",
                    "echo divisibleByFive(37);",
                    "?>"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const divisibleByFive = (n) => n % 5 === 0"
                    ],
                    "explanation": [
                        "The modulo operator (%) returns the remainder of a division operation",
                        "If the remainder is 0, the number is evenly divisible by 5",
                        "ES6 Arrow Syntax is used to define the function",
                        "The return keyword can be omitted for single line arrow functions"
                    ]
                },
                "python": {
                    "solution": [
                        "def divisibleByFive(n):",
                        "    return n % 5 == 0"
                    ],
                    "explanation": [
                        "The modulo operator (%) returns the remainder of a division operation",
                        "If the remainder is 0, the number is evenly divisible by 5"
                    ]
                }
            },
            "answer": ["true", "true", "false"]
        },
        {
            "id": 4,
            "title": "Return the Next Number from the Integer Passed",
            "difficulty": "Easy",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes a number as an argument, increments the number by +1 and returns the result. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "nextNumber(7) ➞ 8",
                "nextNumber(-5) ➞ -4",
                "nextNumber(11) ➞ 12",
                "",
                "Test Cases:",
                "",
                "nextNumber(0)",
                "nextNumber(9)",
                "nextNumber(-3)"
            ],
            "body": {
                "javascript": [
                    "const nextNumber = (n) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(nextNumber(0));",
                    "console.log(nextNumber(9));",
                    "console.log(nextNumber(-3));"
                ],
                "python": [
                    "def nextNumber(n):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(nextNumber(0))",
                    "print(nextNumber(9))",
                    "print(nextNumber(-3))"
                ],
                "java": [
                    "public class Main {",
                    "    public static int nextNumber(int n) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(nextNumber(0));",
                    "        System.out.println(nextNumber(9));",
                    "        System.out.println(nextNumber(-3));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "",
                    "int nextNumber(int n) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", nextNumber(0));",
                    "    printf(\"%d\\n\", nextNumber(9));",
                    "    printf(\"%d\\n\", nextNumber(-3));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "",
                    "int nextNumber(int n) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << nextNumber(0) << std::endl;",
                    "    std::cout << nextNumber(9) << std::endl;",
                    "    std::cout << nextNumber(-3) << std::endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class NextNumber {",
                    "    public static int nextNumber(int n) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        System.Console.WriteLine(nextNumber(0));",
                    "        System.Console.WriteLine(nextNumber(9));",
                    "        System.Console.WriteLine(nextNumber(-3));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import \"fmt\"",
                    "",
                    "func nextNumber(n int) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(nextNumber(0))",
                    "    fmt.Println(nextNumber(9))",
                    "    fmt.Println(nextNumber(-3))",
                    "}"
                ],
                "ruby": [
                    "def nextNumber(n)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts nextNumber(0)",
                    "puts nextNumber(9)",
                    "puts nextNumber(-3)"
                ],
                "swift": [
                    "func nextNumber(_ n: Int) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(nextNumber(0))",
                    "print(nextNumber(9))",
                    "print(nextNumber(-3))"
                ],
                "php": [
                    "<?php",
                    "function nextNumber($n) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo nextNumber(0);",
                    "echo nextNumber(9);",
                    "echo nextNumber(-3);",
                    "?>"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const nextNumber = (n) => n + 1"
                    ],
                    "explanation": [
                        "The addition operator (+) is used to increment a number by 1",
                        "ES6 Arrow Syntax is used to define the function",
                        "The return keyword can be omitted for single line arrow functions"
                    ]
                },
                "python": {
                    "solution": [
                        "def nextNumber(n):",
                        "    return n + 1"
                    ],
                    "explanation": [
                        "The addition operator (+) is used to increment a number by 1"
                    ]
                }
            },
            "answer": ["1", "10", "-2"]
        },
        {
            "id": 5,
            "title": "Convert Minutes into Seconds",
            "difficulty": "Easy",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Write a function that takes an integer minutes and converts it to seconds. If minutes is negative, return 0. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "convert(0) ➞ 0",
                "convert(2) ➞ 120",
                "convert(10) ➞ 600",
                "",
                "Test Cases:",
                "",
                "convert(5)",
                "convert(3)",
                "convert(-5)"
            ],
            "body": {
                "javascript": [
                    "const convert = (minutes) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(convert(5));",
                    "console.log(convert(3));",
                    "console.log(convert(-5));"
                ],
                "python": [
                    "def convert(minutes):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(convert(5))",
                    "print(convert(3))",
                    "print(convert(-5))"
                ],
                "java": [
                    "public class Main {",
                    "    public static int convert(int minutes) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(convert(5));",
                    "        System.out.println(convert(3));",
                    "        System.out.println(convert(-5));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "",
                    "int convert(int minutes) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", convert(5));",
                    "    printf(\"%d\\n\", convert(3));",
                    "    printf(\"%d\\n\", convert(-5));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "",
                    "int convert(int minutes) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << convert(5) << std::endl;",
                    "    std::cout << convert(3) << std::endl;",
                    "    std::cout << convert(-5) << std::endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Convert {",
                    "    public static int convert(int minutes) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        System.Console.WriteLine(convert(5));",
                    "        System.Console.WriteLine(convert(3));",
                    "        System.Console.WriteLine(convert(-5));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import \"fmt\"",
                    "",
                    "func convert(minutes int) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(convert(5))",
                    "    fmt.Println(convert(3))",
                    "    fmt.Println(convert(-5))",
                    "}"
                ],
                "ruby": [
                    "def convert(minutes)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts convert(5)",
                    "puts convert(3)",
                    "puts convert(-5)"
                ],
                "swift": [
                    "func convert(_ minutes: Int) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(convert(5))",
                    "print(convert(3))",
                    "print(convert(-5))"
                ],
                "php": [
                    "<?php",
                    "function convert($minutes) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo convert(5);",
                    "echo convert(3);",
                    "echo convert(-5);",
                    "?>"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const convert = (minutes) => minutes > 0 ? minutes * 60 : 0"
                    ],
                    "explanation": [
                        "The ternary operator (?:) is used to check if minutes is greater than 0",
                        "If minutes is greater than 0, the function returns minutes multiplied by 60",
                        "If minutes is less than or equal to 0, the function returns 0",
                        "ES6 Arrow Syntax is used to define the function",
                        "The return keyword can be omitted for single line arrow functions"
                    ]
                },
                "python": {
                    "solution": [
                        "def convert(minutes):",
                        "    return minutes * 60 if minutes > 0 else 0"
                    ],
                    "explanation": [
                        "The ternary operator (if condition else) is used to check if minutes is greater than 0",
                        "If minutes is greater than 0, the function returns minutes multiplied by 60",
                        "If minutes is less than or equal to 0, the function returns 0"
                    ]
                }
            },
            "answer": ["300", "180", "0"]
        },
        {
            "id": 6,
            "title": "Find the Perimeter of a Rectangle",
            "difficulty": "Easy",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes length and width and finds the perimeter of a rectangle. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "findPerimeter(3, 4) ➞ 14",
                "findPerimeter(10, 5) ➞ 30",
                "findPerimeter(1, 1) ➞ 4",
                "",
                "Test Cases:",
                "",
                "findPerimeter(6, 7)",
                "findPerimeter(20, 10)",
                "findPerimeter(2, 9)"
            ],
            "body": {
                "javascript": [
                    "const findPerimeter = (length, width) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(findPerimeter(6, 7));",
                    "console.log(findPerimeter(20, 10));",
                    "console.log(findPerimeter(2, 9));"
                ],
                "python": [
                    "def findPerimeter(length, width):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(findPerimeter(6, 7))",
                    "print(findPerimeter(20, 10))",
                    "print(findPerimeter(2, 9))"
                ],
                "java": [
                    "public class Main {",
                    "    public static int findPerimeter(int length, int width) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(findPerimeter(6, 7));",
                    "        System.out.println(findPerimeter(20, 10));",
                    "        System.out.println(findPerimeter(2, 9));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "",
                    "int findPerimeter(int length, int width) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", findPerimeter(6, 7));",
                    "    printf(\"%d\\n\", findPerimeter(20, 10));",
                    "    printf(\"%d\\n\", findPerimeter(2, 9));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "",
                    "int findPerimeter(int length, int width) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << findPerimeter(6, 7) << std::endl;",
                    "    std::cout << findPerimeter(20, 10) << std::endl;",
                    "    std::cout << findPerimeter(2, 9) << std::endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class FindPerimeter {",
                    "    public static int findPerimeter(int length, int width) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        System.Console.WriteLine(findPerimeter(6, 7));",
                    "        System.Console.WriteLine(findPerimeter(20, 10));",
                    "        System.Console.WriteLine(findPerimeter(2, 9));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import \"fmt\"",
                    "",
                    "func findPerimeter(length int, width int) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(findPerimeter(6, 7))",
                    "    fmt.Println(findPerimeter(20, 10))",
                    "    fmt.Println(findPerimeter(2, 9))",
                    "}"
                ],
                "ruby": [
                    "def findPerimeter(length, width)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts findPerimeter(6, 7)",
                    "puts findPerimeter(20, 10)",
                    "puts findPerimeter(2, 9)"
                ],
                "swift": [
                    "func findPerimeter(_ length: Int, _ width: Int) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(findPerimeter(6, 7))",
                    "print(findPerimeter(20, 10))",
                    "print(findPerimeter(2, 9))"
                ],
                "php": [
                    "<?php",
                    "function findPerimeter($length, $width) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo findPerimeter(6, 7);",
                    "echo findPerimeter(20, 10);",
                    "echo findPerimeter(2, 9);",
                    "?>"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const findPerimeter = (length, width) => {",
                        "    return (length + width) * 2",
                        "}"
                    ],
                    "explanation": [
                        "The perimeter of a rectangle is the sum of the lengths of all four sides",
                        "This can be simplified to the sum of the length and width multiplied by 2",
                        "The addition operator (+) and multiplication operator (*) are used to get the desired result"
                    ]
                },
                "python": {
                    "solution": [
                        "def findPerimeter(length, width):",
                        "    return (length + width) * 2"
                    ],
                    "explanation": [
                        "The perimeter of a rectangle is the sum of the lengths of all four sides",
                        "This can be simplified to the sum of the length and width multiplied by 2",
                        "The addition operator (+) and multiplication operator (*) are used to get the desired result"
                    ]
                }
            },
            "answer": ["26", "60", "22"]
        },
        {
            "id": 7,
            "title": "Less Than 100?",
            "difficulty": "Easy",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes two numbers as arguments and return true if the sum of the numbers is less than 100. Otherwise return false. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "lessThan100(10, 20) ➞ true",
                "lessThan100(75, 55) ➞ false",
                "lessThan100(0, 0) ➞ true",
                "",
                "Test Cases:",
                "",
                "lessThan100(22, 15)",
                "lessThan100(83, 34)",
                "lessThan100(3, 77)"
            ],
            "body": {
                "javascript": [
                    "const lessThan100 = (a, b) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(lessThan100(22, 15));",
                    "console.log(lessThan100(83, 34));",
                    "console.log(lessThan100(3, 77));"
                ],
                "python": [
                    "def lessThan100(a, b):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(lessThan100(22, 15))",
                    "print(lessThan100(83, 34))",
                    "print(lessThan100(3, 77))"
                ],
                "java": [
                    "public class Main {",
                    "    public static boolean lessThan100(int a, int b) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(lessThan100(22, 15));",
                    "        System.out.println(lessThan100(83, 34));",
                    "        System.out.println(lessThan100(3, 77));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "",
                    "int lessThan100(int a, int b) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", lessThan100(22, 15));",
                    "    printf(\"%d\\n\", lessThan100(83, 34));",
                    "    printf(\"%d\\n\", lessThan100(3, 77));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "",
                    "int lessThan100(int a, int b) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << lessThan100(22, 15) << std::endl;",
                    "    std::cout << lessThan100(83, 34) << std::endl;",
                    "    std::cout << lessThan100(3, 77) << std::endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class LessThan100 {",
                    "    public static bool lessThan100(int a, int b) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        System.Console.WriteLine(lessThan100(22, 15));",
                    "        System.Console.WriteLine(lessThan100(83, 34));",
                    "        System.Console.WriteLine(lessThan100(3, 77));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import \"fmt\"",
                    "",
                    "func lessThan100(a int, b int) bool {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(lessThan100(22, 15))",
                    "    fmt.Println(lessThan100(83, 34))",
                    "    fmt.Println(lessThan100(3, 77))",
                    "}"
                ],
                "ruby": [
                    "def lessThan100(a, b)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts lessThan100(22, 15)",
                    "puts lessThan100(83, 34)",
                    "puts lessThan100(3, 77)"
                ],
                "swift": [
                    "func lessThan100(_ a: Int, _ b: Int) -> Bool {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(lessThan100(22, 15))",
                    "print(lessThan100(83, 34))",
                    "print(lessThan100(3, 77))"
                ],
                "php": [
                    "<?php",
                    "function lessThan100($a, $b) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo lessThan100(22, 15);",
                    "echo lessThan100(83, 34);",
                    "echo lessThan100(3, 77);",
                    "?>"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const lessThan100 = (a, b) => a + b < 100"
                    ],
                    "explanation": [
                        "The addition operator (+) is used to add the two numbers",
                        "The comparison operator (<) is used to check if the sum is less than 100",
                        "ES6 Arrow Syntax is used to define the function",
                        "The return keyword can be omitted for single line arrow functions"
                    ]
                },
                "python": {
                    "solution": [
                        "def lessThan100(a, b):",
                        "    return a + b < 100"
                    ],
                    "explanation": [
                        "The addition operator (+) is used to add the two numbers",
                        "The comparison operator (<) is used to check if the sum is less than 100",
                    ]
                }
            },
            "answer": ["true", "false", "true"]
        },
        {
            "id": 8,
            "title": "Convert Object to Array",
            "difficulty": "Medium",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that converts an object into an array, where each element represents a key-value pair in the form of an array. An empty object should equate to an empty array. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "toArray({ a: 5, b: 10, c: 15 }) ➞ [[\"a\", 5], [\"b\", 10], [\"c\", 15]]",
                "toArray({ firstName: \"John\", lastName: \"Doe\" }) ➞ [[\"firstName\", \"John\"], [\"lastName\", \"Doe\"]]",
                "toArray({ key: \"value\" }) ➞ [[\"key\", \"value\"]]",
                "",
                "Test Cases:",
                "",
                "toArray({ a: 1, b: 2 })",
                "toArray({ shrimp: 15, tots: 12 })",
                "toArray({})"
            ],
            "body": {
                "javascript": [
                    "const toArray = (obj) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(toArray({ a: 1, b: 2 }));",
                    "console.log(toArray({ shrimp: 15, tots: 12 }));",
                    "console.log(toArray({}));"
                ],
                "python": [
                    "def toArray(obj):",
                    "    # Your code here",
                    "    pass",
                    "",
                    "print(toArray({ \"a\": 1, \"b\": 2 }))",
                    "print(toArray({ \"shrimp\": 15, \"tots\": 12 }))",
                    "print(toArray({}))"
                ],
                "java": [
                    "import java.util.ArrayList;",
                    "import java.util.Arrays;",
                    "import java.util.HashMap;",
                    "import java.util.List;",
                    "import java.util.Map;",
                    "",
                    "public class Main {",
                    "    public static List<List<Object>> toArray(Map<String, Object> obj) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        Map<String, Object> obj1 = new HashMap<>();",
                    "        obj1.put(\"a\", 1);",
                    "        obj1.put(\"b\", 2);",
                    "        System.out.println(toArray(obj1));",
                    "",
                    "        Map<String, Object> obj2 = new HashMap<>();",
                    "        obj2.put(\"shrimp\", 15);",
                    "        obj2.put(\"tots\", 12);",
                    "        System.out.println(toArray(obj2));",
                    "",
                    "        Map<String, Object> obj3 = new HashMap<>();",
                    "        System.out.println(toArray(obj3));",
                    "    }",
                    "}"
                ],
                "c": [
                    "#include <stdio.h>",
                    "#include <stdlib.h>",
                    "#include <string.h>",
                    "",
                    "typedef struct {",
                    "    char *key;",
                    "    int value;",
                    "} Entry;",
                    "",
                    "typedef struct {",
                    "    Entry *entries;",
                    "    int size;",
                    "} Array;",
                    "",
                    "Array toArray(Entry *entries, int size) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    Entry entries1[] = {",
                    "        {\"a\", 1},",
                    "        {\"b\", 2}",
                    "    };",
                    "    Array arr1 = toArray(entries1, 2);",
                    "    for (int i = 0; i < arr1.size; i++) {",
                    "        printf(\"%s, %d\\n\", arr1.entries[i].key, arr1.entries[i].value);",
                    "    }",
                    "",
                    "    Entry entries2[] = {",
                    "        {\"shrimp\", 15},",
                    "        {\"tots\", 12}",
                    "    };",
                    "    Array arr2 = toArray(entries2, 2);",
                    "    for (int i = 0; i < arr2.size; i++) {",
                    "        printf(\"%s, %d\\n\", arr2.entries[i].key, arr2.entries[i].value);",
                    "    }",
                    "",
                    "    Entry entries3[] = {};",
                    "    Array arr3 = toArray(entries3, 0);",
                    "    for (int i = 0; i < arr3.size; i++) {",
                    "        printf(\"%s, %d\\n\", arr3.entries[i].key, arr3.entries[i].value);",
                    "    }",
                    "",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "#include <iostream>",
                    "#include <vector>",
                    "#include <map>",
                    "",
                    "using namespace std;",
                    "",
                    "vector<vector<string>> toArray(map<string, int> obj) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    map<string, int> obj1 = {",
                    "        {\"a\", 1},",
                    "        {\"b\", 2}",
                    "    };",
                    "    vector<vector<string>> arr1 = toArray(obj1);",
                    "    for (int i = 0; i < arr1.size(); i++) {",
                    "        cout << arr1[i][0] << \", \" << arr1[i][1] << endl;",
                    "    }",
                    "",
                    "    map<string, int> obj2 = {",
                    "        {\"shrimp\", 15},",
                    "        {\"tots\", 12}",
                    "    };",
                    "    vector<vector<string>> arr2 = toArray(obj2);",
                    "    for (int i = 0; i < arr2.size(); i++) {",
                    "        cout << arr2[i][0] << \", \" << arr2[i][1] << endl;",
                    "    }",
                    "",
                    "    map<string, int> obj3 = {};",
                    "    vector<vector<string>> arr3 = toArray(obj3);",
                    "    for (int i = 0; i < arr3.size(); i++) {",
                    "        cout << arr3[i][0] << \", \" << arr3[i][1] << endl;",
                    "    }",
                    "",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "using System;",
                    "using System.Collections.Generic;",
                    "",
                    "public class Program",
                    "{",
                    "    public static List<List<string>> toArray(Dictionary<string, int> obj)",
                    "    {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main()",
                    "    {",
                    "        Dictionary<string, int> obj1 = new Dictionary<string, int>()",
                    "        {",
                    "            {\"a\", 1},",
                    "            {\"b\", 2}",
                    "        };",
                    "        List<List<string>> arr1 = toArray(obj1);",
                    "        foreach (List<string> item in arr1)",
                    "        {",
                    "            Console.WriteLine(item[0] + \", \" + item[1]);",
                    "        }",
                    "",
                    "        Dictionary<string, int> obj2 = new Dictionary<string, int>()",
                    "        {",
                    "            {\"shrimp\", 15},",
                    "            {\"tots\", 12}",
                    "        };",
                    "        List<List<string>> arr2 = toArray(obj2);",
                    "        foreach (List<string> item in arr2)",
                    "        {",
                    "            Console.WriteLine(item[0] + \", \" + item[1]);",
                    "        }",
                    "",
                    "        Dictionary<string, int> obj3 = new Dictionary<string, int>();",
                    "        List<List<string>> arr3 = toArray(obj3);",
                    "        foreach (List<string> item in arr3)",
                    "        {",
                    "            Console.WriteLine(item[0] + \", \" + item[1]);",
                    "        }",
                    "    }",
                    "}"
                ],
                "ruby": [
                    "def to_array(obj)",
                    "    # Your code here",
                    "end",
                    "",
                    "obj1 = {",
                    "    \"a\" => 1,",
                    "    \"b\" => 2",
                    "}",
                    "arr1 = to_array(obj1)",
                    "arr1.each do |item|",
                    "    puts item[0] + \", \" + item[1].to_s",
                    "end",
                    "",
                    "obj2 = {",
                    "    \"shrimp\" => 15,",
                    "    \"tots\" => 12",
                    "}",
                    "arr2 = to_array(obj2)",
                    "arr2.each do |item|",
                    "    puts item[0] + \", \" + item[1].to_s",
                    "end",
                    "",
                    "obj3 = {}",
                    "arr3 = to_array(obj3)",
                    "arr3.each do |item|",
                    "    puts item[0] + \", \" + item[1].to_s",
                    "end"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    "    \"sort\"",
                    ")",
                    "",
                    "func toArray(obj map[string]int) [][]string {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    obj1 := map[string]int{",
                    "        \"a\": 1,",
                    "        \"b\": 2,",
                    "    }",
                    "    arr1 := toArray(obj1)",
                    "    for _, item := range arr1 {",
                    "        fmt.Println(item[0] + \", \" + item[1])",
                    "    }",
                    "",
                    "    obj2 := map[string]int{",
                    "        \"shrimp\": 15,",
                    "        \"tots\": 12,",
                    "    }",
                    "    arr2 := toArray(obj2)",
                    "    for _, item := range arr2 {",
                    "        fmt.Println(item[0] + \", \" + item[1])",
                    "    }",
                    "",
                    "    obj3 := map[string]int{}",
                    "    arr3 := toArray(obj3)",
                    "    for _, item := range arr3 {",
                    "        fmt.Println(item[0] + \", \" + item[1])",
                    "    }",
                    "}"
                ]
            },
            "solutions": {
                "javascript": {
                    "solution": [
                        "const toArray = obj => Object.entries(obj)"
                    ],
                    "explanation": [
                        "The Object.entries() method takes an object and returns an array of arrays",
                        "Each subarray contains a key and a value from the object",
                        "ES6 Arrow Syntax is used to define the function",
                        "The return keyword can be omitted for single line arrow functions"
                    ]
                },
                "python": {
                    "solution": [
                        "def toArray(obj):",
                        "    return [[key, obj[key]] for key in obj]"
                    ],
                    "explanation": [
                        "A list comprehension is used to create a new list",
                        "The for loop iterates over the keys in the object",
                        "Each key is used to access the value in the object",
                        "The key and value are added to a new subarray, which is then added to the new list"
                    ]
                }
            },
            "answer": ["[[\"a\", \"1\"], [\"b\", \"2\"]]", "[[\"shrimp\", \"15\"], [\"tots\", \"12\"]]", "[]"]
        },
        {
            "id": 9,
            "title": "Vowels in a String",
            "difficulty": "Medium",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes a string and returns the number (count) of vowels contained within it. Letters considered as vowels are: a, e, i, o, u. Note: y is not considered a vowel. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "vowels(\"Hello\") ➞ 2",
                "vowels(\"Why\") ➞ 0",
                "vowels(\"EdiCode\") ➞ 4",
                "",
                "TestCases:",
                "",
                "countVowels(\"Celebration\")",
                "countVowels(\"Palm\")",
                "countVowels(\"Prediction\")"
            ],
            "body": {
                "javascript": [
                    "const countVowels = (str) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(countVowels(\"Celebration\"));",
                    "console.log(countVowels(\"Palm\"));",
                    "console.log(countVowels(\"Prediction\"));"
                ],
                "python": [
                    "def count_vowels(str):",
                    "    # Your code here",
                    "",
                    "print(count_vowels(\"Celebration\"))",
                    "print(count_vowels(\"Palm\"))",
                    "print(count_vowels(\"Prediction\"))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int countVowels(String str) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(countVowels(\"Celebration\"));",
                    "        System.out.println(countVowels(\"Palm\"));",
                    "        System.out.println(countVowels(\"Prediction\"));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int countVowels(char *str) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", countVowels(\"Celebration\"));",
                    "    printf(\"%d\\n\", countVowels(\"Palm\"));",
                    "    printf(\"%d\\n\", countVowels(\"Prediction\"));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "int countVowels(string str) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    cout << countVowels(\"Celebration\") << endl;",
                    "    cout << countVowels(\"Palm\") << endl;",
                    "    cout << countVowels(\"Prediction\") << endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "using System;",
                    "",
                    "public class Program {",
                    "    public static int CountVowels(string str) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main() {",
                    "        Console.WriteLine(CountVowels(\"Celebration\"));",
                    "        Console.WriteLine(CountVowels(\"Palm\"));",
                    "        Console.WriteLine(CountVowels(\"Prediction\"));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func countVowels(str string) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(countVowels(\"Celebration\"))",
                    "    fmt.Println(countVowels(\"Palm\"))",
                    "    fmt.Println(countVowels(\"Prediction\"))",
                    "}"
                ],
                "ruby": [
                    "def count_vowels(str)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts count_vowels(\"Celebration\")",
                    "puts count_vowels(\"Palm\")",
                    "puts count_vowels(\"Prediction\")"
                ],
                "swift": [
                    "func countVowels(_ str: String) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(countVowels(\"Celebration\"))",
                    "print(countVowels(\"Palm\"))",
                    "print(countVowels(\"Prediction\"))"
                ],
                "php": [
                    "<?php",
                    "function countVowels($str) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo countVowels(\"Celebration\");",
                    "echo countVowels(\"Palm\");",
                    "echo countVowels(\"Prediction\");",
                    "?>"
                ]
            },
            "answer": ["5", "1", "4"]
        },
        {
            "id": 10,
            "title": "Second Largest Number in an Array",
            "difficulty": "Medium",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes an array of numbers and returns the second largest number. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "secondLargest([1, 2, 3, 4, 5]) ➞ 4",
                "secondLargest([20, -20, 40]) ➞ 20",
                "secondLargest([10, 10, 10, 10, 10]) ➞ 10",
                "",
                "Test Cases:",
                "",
                "secondLargest([10, 40, 30, 20, 50])",
                "secondLargest([25, 143, 89, 13, 105])",
                "secondLargest([54, 23, 11, 17, 10])"
            ],
            "body": {
                "javascript": [
                    "const secondLargest = (arr) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(secondLargest([10, 40, 30, 20, 50]));",
                    "console.log(secondLargest([25, 143, 89, 13, 105]));",
                    "console.log(secondLargest([54, 23, 11, 17, 10]));"
                ],
                "python": [
                    "def second_largest(arr):",
                    "    # Your code here",
                    "",
                    "print(second_largest([10, 40, 30, 20, 50]))",
                    "print(second_largest([25, 143, 89, 13, 105]))",
                    "print(second_largest([54, 23, 11, 17, 10]))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int secondLargest(int[] arr) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(secondLargest(new int[]{10, 40, 30, 20, 50}));",
                    "        System.out.println(secondLargest(new int[]{25, 143, 89, 13, 105}));",
                    "        System.out.println(secondLargest(new int[]{54, 23, 11, 17, 10}));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int secondLargest(int *arr) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", secondLargest((int[]){10, 40, 30, 20, 50}));",
                    "    printf(\"%d\\n\", secondLargest((int[]){25, 143, 89, 13, 105}));",
                    "    printf(\"%d\\n\", secondLargest((int[]){54, 23, 11, 17, 10}));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "int secondLargest(int *arr) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    cout << secondLargest((int[]){10, 40, 30, 20, 50}) << endl;",
                    "    cout << secondLargest((int[]){25, 143, 89, 13, 105}) << endl;",
                    "    cout << secondLargest((int[]){54, 23, 11, 17, 10}) << endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "using System;",
                    "",
                    "public class Program {",
                    "    public static int SecondLargest(int[] arr) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main() {",
                    "        Console.WriteLine(SecondLargest(new int[]{10, 40, 30, 20, 50}));",
                    "        Console.WriteLine(SecondLargest(new int[]{25, 143, 89, 13, 105}));",
                    "        Console.WriteLine(SecondLargest(new int[]{54, 23, 11, 17, 10}));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func secondLargest(arr []int) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(secondLargest([]int{10, 40, 30, 20, 50}))",
                    "    fmt.Println(secondLargest([]int{25, 143, 89, 13, 105}))",
                    "    fmt.Println(secondLargest([]int{54, 23, 11, 17, 10}))",
                    "}"
                ],
                "ruby": [
                    "def second_largest(arr)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts second_largest([10, 40, 30, 20, 50])",
                    "puts second_largest([25, 143, 89, 13, 105])",
                    "puts second_largest([54, 23, 11, 17, 10])"
                ],
                "swift": [
                    "func secondLargest(_ arr: [Int]) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(secondLargest([10, 40, 30, 20, 50]))",
                    "print(secondLargest([25, 143, 89, 13, 105]))",
                    "print(secondLargest([54, 23, 11, 17, 10]))"
                ],
                "php": [
                    "<?php",
                    "function secondLargest($arr) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo secondLargest([10, 40, 30, 20, 50]);",
                    "echo secondLargest([25, 143, 89, 13, 105]);",
                    "echo secondLargest([54, 23, 11, 17, 10]);",
                    "?>"
                ]
            },
            "answer": ["40", "105", "23"]
        },
        {
            "id": 11,
            "title": "Bubble Sort",
            "difficulty": "Medium",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes an array of numbers and returns a sorted array. The function should sort the array using the bubble sort algorithm. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "bubbleSort([10, 20, 50, 50, 20]) ➞ [10, 20, 20, 50, 50]",
                "bubbleSort([0, 3, 9, 7, -1]) ➞ [-1, 0, 3, 7, 9]",
                "bubbleSort([5, 4, 3, 2, 1]) ➞ [1, 2, 3, 4, 5]",
                "",
                "Test Cases:",
                "",
                "bubbleSort([5, 2, 7, 1])",
                "bubbleSort([10, 5, 20, 8])",
                "bubbleSort([1, 2, 3, 4])"
            ],
            "body": {
                "javascript": [
                    "const bubbleSort = (arr) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(bubbleSort([5, 2, 7, 1]));",
                    "console.log(bubbleSort([10, 5, 20, 8]));",
                    "console.log(bubbleSort([1, 2, 3, 4]));"
                ],
                "python": [
                    "def bubble_sort(arr):",
                    "    # Your code here",
                    "",
                    "print(bubble_sort([5, 2, 7, 1]))",
                    "print(bubble_sort([10, 5, 20, 8]))",
                    "print(bubble_sort([1, 2, 3, 4]))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int[] bubbleSort(int[] arr) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(Arrays.toString(bubbleSort(new int[]{5, 2, 7, 1})));",
                    "        System.out.println(Arrays.toString(bubbleSort(new int[]{10, 5, 20, 8})));",
                    "        System.out.println(Arrays.toString(bubbleSort(new int[]{1, 2, 3, 4})));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int* bubbleSort(int *arr) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", bubbleSort((int[]){5, 2, 7, 1}));",
                    "    printf(\"%d\\n\", bubbleSort((int[]){10, 5, 20, 8}));",
                    "    printf(\"%d\\n\", bubbleSort((int[]){1, 2, 3, 4}));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "int* bubbleSort(int *arr) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    cout << bubbleSort((int[]){5, 2, 7, 1}) << endl;",
                    "    cout << bubbleSort((int[]){10, 5, 20, 8}) << endl;",
                    "    cout << bubbleSort((int[]){1, 2, 3, 4}) << endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Program {",
                    "    public static int[] bubbleSort(int[] arr) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main() {",
                    "        Console.WriteLine(bubbleSort(new int[]{5, 2, 7, 1}));",
                    "        Console.WriteLine(bubbleSort(new int[]{10, 5, 20, 8}));",
                    "        Console.WriteLine(bubbleSort(new int[]{1, 2, 3, 4}));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func bubbleSort(arr []int) []int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(bubbleSort([]int{5, 2, 7, 1}))",
                    "    fmt.Println(bubbleSort([]int{10, 5, 20, 8}))",
                    "    fmt.Println(bubbleSort([]int{1, 2, 3, 4}))",
                    "}"
                ],
                "ruby": [
                    "def bubble_sort(arr)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts bubble_sort([5, 2, 7, 1])",
                    "puts bubble_sort([10, 5, 20, 8])",
                    "puts bubble_sort([1, 2, 3, 4])"
                ],
                "swift": [
                    "func bubbleSort(_ arr: [Int]) -> [Int] {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(bubbleSort([5, 2, 7, 1]))",
                    "print(bubbleSort([10, 5, 20, 8]))",
                    "print(bubbleSort([1, 2, 3, 4]))"
                ],
                "php": [
                    "<?php",
                    "function bubbleSort($arr) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo bubbleSort([5, 2, 7, 1]);",
                    "echo bubbleSort([10, 5, 20, 8]);",
                    "echo bubbleSort([1, 2, 3, 4]);",
                    "?>"
                ]
            },
            "answer": ["[1, 2, 5, 7]", "[5, 8, 10, 20]", "[1, 2, 3, 4]"]
        },
        {
            "id": 12,
            "title": "Array of Multiples",
            "difficulty": "Medium",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes two numbers as arguments (num, length) and returns an array of multiples of num up to length. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "arrayOfMultiples(1, 3) ➞ [1, 2, 3]",
                "arrayOfMultiples(3, 10) ➞ [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]",
                "arrayOfMultiples(27, 1) ➞ [27]",
                "",
                "Test Cases:",
                "",
                "arrayOfMultiples(7, 5)",
                "arrayOfMultiples(12, 10)",
                "arrayOfMultiples(17, 6)"
            ],
            "body": {
                "javascript": [
                    "const arrayOfMultiples = (num, length) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(arrayOfMultiples(7, 5));",
                    "console.log(arrayOfMultiples(12, 10));",
                    "console.log(arrayOfMultiples(17, 6));"
                ],
                "python": [
                    "def array_of_multiples(num, length):",
                    "    # Your code here",
                    "",
                    "print(array_of_multiples(7, 5))",
                    "print(array_of_multiples(12, 10))",
                    "print(array_of_multiples(17, 6))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int[] arrayOfMultiples(int num, int length) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(Arrays.toString(arrayOfMultiples(7, 5)));",
                    "        System.out.println(Arrays.toString(arrayOfMultiples(12, 10)));",
                    "        System.out.println(Arrays.toString(arrayOfMultiples(17, 6)));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int* arrayOfMultiples(int num, int length) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\\n\", arrayOfMultiples(7, 5));",
                    "    printf(\"%d\\n\", arrayOfMultiples(12, 10));",
                    "    printf(\"%d\\n\", arrayOfMultiples(17, 6));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "int* arrayOfMultiples(int num, int length) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    cout << arrayOfMultiples(7, 5) << endl;",
                    "    cout << arrayOfMultiples(12, 10) << endl;",
                    "    cout << arrayOfMultiples(17, 6) << endl;",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Program {",
                    "    public static int[] arrayOfMultiples(int num, int length) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main() {",
                    "        Console.WriteLine(arrayOfMultiples(7, 5));",
                    "        Console.WriteLine(arrayOfMultiples(12, 10));",
                    "        Console.WriteLine(arrayOfMultiples(17, 6));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func arrayOfMultiples(num int, length int) []int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(arrayOfMultiples(7, 5))",
                    "    fmt.Println(arrayOfMultiples(12, 10))",
                    "    fmt.Println(arrayOfMultiples(17, 6))",
                    "}"
                ],
                "ruby": [
                    "def array_of_multiples(num, length)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts array_of_multiples(7, 5)",
                    "puts array_of_multiples(12, 10)",
                    "puts array_of_multiples(17, 6)"
                ],
                "swift": [
                    "func arrayOfMultiples(_ num: Int, _ length: Int) -> [Int] {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(arrayOfMultiples(7, 5))",
                    "print(arrayOfMultiples(12, 10))",
                    "print(arrayOfMultiples(17, 6))"
                ],
                "php": [
                    "<?php",
                    "function arrayOfMultiples($num, $length) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo arrayOfMultiples(7, 5);",
                    "echo arrayOfMultiples(12, 10);",
                    "echo arrayOfMultiples(17, 6);",
                    "?>"
                ]
            },
            "answer": ["[7, 14, 21, 28, 35]", "[12, 24, 36, 48, 60, 72, 84, 96, 108, 120]", "[17, 34, 51, 68, 85, 102]"]
        },
        {
            "id": 13,
            "title": "Flatten an Array",
            "difficulty": "Medium",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes an array of arrays with numbers. Return a new (single) array with the largest numbers of each. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "findLargestNums([[1, 2], [3, 4], [5, 6, 7]]) ➞ [2, 4, 7]",
                "findLargestNums([[5, 10, 20], [1, 2, 3], [4, 5, 6]]) ➞ [20, 3, 6]",
                "findLargestNums([[1], [2], [3]]) ➞ [1, 2, 3]",
                "",
                "Test Cases:",
                "",
                "findLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]])",
                "findLargestNums([[300, 200, 600, 150], [1000, 1001, 857, 1]])",
                "findLargestNums([[1111, 2222], [3333], [4444, 5555, 6666]])"
            ],
            "body": {
                "javascript": [
                    "const findLargestNums = (arr) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(findLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]]));",
                    "console.log(findLargestNums([[300, 200, 600, 150], [1000, 1001, 857, 1]]));",
                    "console.log(findLargestNums([[1111, 2222], [3333], [4444, 5555, 6666]]));"
                ],
                "python": [
                    "def find_largest_nums(arr):",
                    "    # Your code here",
                    "",
                    "print(find_largest_nums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]]))",
                    "print(find_largest_nums([[300, 200, 600, 150], [1000, 1001, 857, 1]]))",
                    "print(find_largest_nums([[1111, 2222], [3333], [4444, 5555, 6666]]))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int[] findLargestNums(int[][] arr) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(Arrays.toString(findLargestNums(new int[][] {{4, 2, 7, 1}, {20, 70, 40, 90}, {1, 2, 0}})));",
                    "        System.out.println(Arrays.toString(findLargestNums(new int[][] {{300, 200, 600, 150}, {1000, 1001, 857, 1}})));",
                    "        System.out.println(Arrays.toString(findLargestNums(new int[][] {{1111, 2222}, {3333}, {4444, 5555, 6666}})));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int* findLargestNums(int arr[][4], int arrLength) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    int arr1[3][4] = {{4, 2, 7, 1}, {20, 70, 40, 90}, {1, 2, 0}};",
                    "    int arr2[2][4] = {{300, 200, 600, 150}, {1000, 1001, 857, 1}};",
                    "    int arr3[3][3] = {{1111, 2222}, {3333}, {4444, 5555, 6666}};",
                    "    printf(\"%d\", findLargestNums(arr1, 3));",
                    "    printf(\"%d\", findLargestNums(arr2, 2));",
                    "    printf(\"%d\", findLargestNums(arr3, 3));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "std::vector<int> findLargestNums(std::vector<std::vector<int>> arr) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << findLargestNums({{4, 2, 7, 1}, {20, 70, 40, 90}, {1, 2, 0}});",
                    "    std::cout << findLargestNums({{300, 200, 600, 150}, {1000, 1001, 857, 1}});",
                    "    std::cout << findLargestNums({{1111, 2222}, {3333}, {4444, 5555, 6666}});",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Program {",
                    "    public static int[] findLargestNums(int[][] arr) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        Console.WriteLine(findLargestNums(new int[][] {new int[] {4, 2, 7, 1}, new int[] {20, 70, 40, 90}, new int[] {1, 2, 0}}));",
                    "        Console.WriteLine(findLargestNums(new int[][] {new int[] {300, 200, 600, 150}, new int[] {1000, 1001, 857, 1}}));",
                    "        Console.WriteLine(findLargestNums(new int[][] {new int[] {1111, 2222}, new int[] {3333}, new int[] {4444, 5555, 6666}}));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func findLargestNums(arr [][]int) []int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(findLargestNums([][]int {{4, 2, 7, 1}, {20, 70, 40, 90}, {1, 2, 0}}))",
                    "    fmt.Println(findLargestNums([][]int {{300, 200, 600, 150}, {1000, 1001, 857, 1}}))",
                    "    fmt.Println(findLargestNums([][]int {{1111, 2222}, {3333}, {4444, 5555, 6666}}))",
                    "}"
                ],
                "ruby": [
                    "def find_largest_nums(arr)",
                    "    # Your code here",
                    "end",
                    "",
                    "p find_largest_nums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]])",
                    "p find_largest_nums([[300, 200, 600, 150], [1000, 1001, 857, 1]])",
                    "p find_largest_nums([[1111, 2222], [3333], [4444, 5555, 6666]])"
                ],
                "swift": [
                    "func findLargestNums(_ arr: [[Int]]) -> [Int] {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(findLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]]))",
                    "print(findLargestNums([[300, 200, 600, 150], [1000, 1001, 857, 1]]))",
                    "print(findLargestNums([[1111, 2222], [3333], [4444, 5555, 6666]]))"
                ]
            },
            "answer": ["[7, 90, 2]", "[600, 1001]", "[2222, 3333, 6666]"]
        },
        {
            "id": 14,
            "title": "Square Every Digit",
            "difficulty": "Medium",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that squares every digit of a number. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "squareDigits(123) ➞ 149",
                "squareDigits(999) ➞ 818181",
                "squareDigits(5) ➞ 25",
                "",
                "Test Cases:",
                "",
                "squareDigits(9119)",
                "squareDigits(2483)",
                "squareDigits(3212)"
            ],
            "body": {
                "javascript": [
                    "const squareDigits = (num) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(squareDigits(9119));",
                    "console.log(squareDigits(2483));",
                    "console.log(squareDigits(3212));"
                ],
                "python": [
                    "def square_digits(num):",
                    "    # Your code here",
                    "",
                    "print(square_digits(9119))",
                    "print(square_digits(2483))",
                    "print(square_digits(3212))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int squareDigits(int num) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(squareDigits(9119));",
                    "        System.out.println(squareDigits(2483));",
                    "        System.out.println(squareDigits(3212));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int squareDigits(int num) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\", squareDigits(9119));",
                    "    printf(\"%d\", squareDigits(2483));",
                    "    printf(\"%d\", squareDigits(3212));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "int squareDigits(int num) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << squareDigits(9119);",
                    "    std::cout << squareDigits(2483);",
                    "    std::cout << squareDigits(3212);",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Program {",
                    "    public static int squareDigits(int num) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        Console.WriteLine(squareDigits(9119));",
                    "        Console.WriteLine(squareDigits(2483));",
                    "        Console.WriteLine(squareDigits(3212));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func squareDigits(num int) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(squareDigits(9119))",
                    "    fmt.Println(squareDigits(2483))",
                    "    fmt.Println(squareDigits(3212))",
                    "}"
                ],
                "ruby": [
                    "def square_digits(num)",
                    "    # Your code here",
                    "end",
                    "",
                    "p square_digits(9119)",
                    "p square_digits(2483)",
                    "p square_digits(3212)"
                ],
                "swift": [
                    "func squareDigits(_ num: Int) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(squareDigits(9119))",
                    "print(squareDigits(2483))",
                    "print(squareDigits(3212))"
                ],
                "php": [
                    "<?php",
                    "function squareDigits($num) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo squareDigits(9119);",
                    "echo squareDigits(2483);",
                    "echo squareDigits(3212);",
                    "?>"
                ]
            },
            "answer": ["811181", "416649", "9414"]
        },
        {
            "id": 15,
            "title": "Length of Longest Substring Without Repeating Characters",
            "difficulty": "Hard",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift", "php"],
            "problem_statement": [
                "Problem:",
                "",
                "Given a string, find the length of the longest substring without repeating characters. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "lengthOfLongestSubstring(\"EdiCode\") ➞ 5",
                "lengthOfLongestSubstring(\"Hello World\") ➞ 7",
                "lengthOfLongestSubstring(\"Test\") ➞ 3",
                "",
                "Test Cases:",
                "",
                "lengthOfLongestSubstring(\"abcabcbb\")",
                "lengthOfLongestSubstring(\"aaaaaa\")",
                "lengthOfLongestSubstring(\"abcde\")"
            ],
            "body": {
                "javascript": [
                    "const lengthOfLongestSubstring = (s) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(lengthOfLongestSubstring(\"abcabcbb\"));",
                    "console.log(lengthOfLongestSubstring(\"aaaaaa\"));",
                    "console.log(lengthOfLongestSubstring(\"abcde\"));"
                ],
                "python": [
                    "def length_of_longest_substring(s):",
                    "    # Your code here",
                    "",
                    "print(length_of_longest_substring(\"abcabcbb\"))",
                    "print(length_of_longest_substring(\"aaaaaa\"))",
                    "print(length_of_longest_substring(\"abcde\"))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int lengthOfLongestSubstring(String s) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(lengthOfLongestSubstring(\"abcabcbb\"));",
                    "        System.out.println(lengthOfLongestSubstring(\"aaaaaa\"));",
                    "        System.out.println(lengthOfLongestSubstring(\"abcde\"));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int lengthOfLongestSubstring(char * s) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    printf(\"%d\", lengthOfLongestSubstring(\"abcabcbb\"));",
                    "    printf(\"%d\", lengthOfLongestSubstring(\"aaaaaa\"));",
                    "    printf(\"%d\", lengthOfLongestSubstring(\"abcde\"));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "int lengthOfLongestSubstring(string s) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    std::cout << lengthOfLongestSubstring(\"abcabcbb\");",
                    "    std::cout << lengthOfLongestSubstring(\"aaaaaa\");",
                    "    std::cout << lengthOfLongestSubstring(\"abcde\");",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Program {",
                    "    public static int lengthOfLongestSubstring(string s) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        Console.WriteLine(lengthOfLongestSubstring(\"abcabcbb\"));",
                    "        Console.WriteLine(lengthOfLongestSubstring(\"aaaaaa\"));",
                    "        Console.WriteLine(lengthOfLongestSubstring(\"abcde\"));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func lengthOfLongestSubstring(s string) int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    fmt.Println(lengthOfLongestSubstring(\"abcabcbb\"))",
                    "    fmt.Println(lengthOfLongestSubstring(\"aaaaaa\"))",
                    "    fmt.Println(lengthOfLongestSubstring(\"abcde\"))",
                    "}"
                ],
                "ruby": [
                    "def length_of_longest_substring(s)",
                    "    # Your code here",
                    "end",
                    "",
                    "p length_of_longest_substring(\"abcabcbb\")",
                    "p length_of_longest_substring(\"aaaaaa\")",
                    "p length_of_longest_substring(\"abcde\")"
                ],
                "swift": [
                    "func lengthOfLongestSubstring(_ s: String) -> Int {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(lengthOfLongestSubstring(\"abcabcbb\"))",
                    "print(lengthOfLongestSubstring(\"aaaaaa\"))",
                    "print(lengthOfLongestSubstring(\"abcde\"))"
                ],
                "php": [
                    "<?php",
                    "function lengthOfLongestSubstring($s) {",
                    "    // Your code here",
                    "}",
                    "",
                    "echo lengthOfLongestSubstring(\"abcabcbb\");",
                    "echo lengthOfLongestSubstring(\"aaaaaa\");",
                    "echo lengthOfLongestSubstring(\"abcde\");",
                    "?>"
                ]
            },
            "answer": [3, 1, 5]
        },
        {
            "id": 16,
            "title": "Rotate 2D Matrix Clockwise",
            "difficulty": "Hard",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift"],
            "problem_statement": [
                "Problem:",
                "",
                "Given a 2D matrix, rotate it clockwise. Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "rotateMatrix([[1, 1, 1], [7, 9, 5], [2, 3, 1]]) ➞ [[2, 7, 1], [3, 9, 1], [1, 5, 1]]",
                "rotateMatrix([[7, 11], [22, 0]]) ➞ [[22, 7], [0, 11]]",
                "rotateMatrix([[10, 20, 30], [30, 20, 10]) ➞ [[30, 10], [20, 20], [10, 30]]",
                "",
                "Test Cases:",
                "",
                "rotateMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
                "rotateMatrix([[1, 2], [3, 4]])",
                "rotateMatrix([[1]])"
            ],
            "body": {
                "javascript": [
                    "const rotateMatrix = (matrix) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(rotateMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));",
                    "console.log(rotateMatrix([[1, 2], [3, 4]]));",
                    "console.log(rotateMatrix([[1]]));"
                ],
                "python": [
                    "def rotate_matrix(matrix):",
                    "    # Your code here",
                    "",
                    "print(rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
                    "print(rotate_matrix([[1, 2], [3, 4]]))",
                    "print(rotate_matrix([[1]]))"
                ],
                "java": [
                    "public class Program {",
                    "    public static int[][] rotateMatrix(int[][] matrix) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(rotateMatrix(new int[][] {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}));",
                    "        System.out.println(rotateMatrix(new int[][] {{1, 2}, {3, 4}}));",
                    "        System.out.println(rotateMatrix(new int[][] {{1}}));",
                    "    }",
                    "}"
                ],
                "c": [
                    "int** rotateMatrix(int** matrix, int matrixRowSize, int matrixColSize) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    int matrix1[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};",
                    "    int matrix2[2][2] = {{1, 2}, {3, 4}};",
                    "    int matrix3[1][1] = {{1}};",
                    "    printf(\"%d\", rotateMatrix(matrix1, 3, 3));",
                    "    printf(\"%d\", rotateMatrix(matrix2, 2, 2));",
                    "    printf(\"%d\", rotateMatrix(matrix3, 1, 1));",
                    "    return 0;",
                    "}"
                ],
                "cpp": [
                    "vector<vector<int>> rotateMatrix(vector<vector<int>> matrix) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    vector<vector<int>> matrix1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};",
                    "    vector<vector<int>> matrix2 = {{1, 2}, {3, 4}};",
                    "    vector<vector<int>> matrix3 = {{1}};",
                    "    cout << rotateMatrix(matrix1);",
                    "    cout << rotateMatrix(matrix2);",
                    "    cout << rotateMatrix(matrix3);",
                    "    return 0;",
                    "}"
                ],
                "csharp": [
                    "public class Program {",
                    "    public static int[][] rotateMatrix(int[][] matrix) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        Console.WriteLine(rotateMatrix(new int[][] {new int[] {1, 2, 3}, new int[] {4, 5, 6}, new int[] {7, 8, 9}}));",
                    "        Console.WriteLine(rotateMatrix(new int[][] {new int[] {1, 2}, new int[] {3, 4}}));",
                    "        Console.WriteLine(rotateMatrix(new int[][] {new int[] {1}}));",
                    "    }",
                    "}"
                ],
                "go": [
                    "func rotateMatrix(matrix [][]int) [][]int {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    matrix1 := [][]int{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}",
                    "    matrix2 := [][]int{{1, 2}, {3, 4}}",
                    "    matrix3 := [][]int{{1}}",
                    "    fmt.Println(rotateMatrix(matrix1))",
                    "    fmt.Println(rotateMatrix(matrix2))",
                    "    fmt.Println(rotateMatrix(matrix3))",
                    "}"
                ],
                "ruby": [
                    "def rotate_matrix(matrix)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
                    "puts rotate_matrix([[1, 2], [3, 4]])",
                    "puts rotate_matrix([[1]])"
                ],
                "swift": [
                    "func rotateMatrix(_ matrix: [[Int]]) -> [[Int]] {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(rotateMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
                    "print(rotateMatrix([[1, 2], [3, 4]]))",
                    "print(rotateMatrix([[1]]))"
                ]
            },
            "answer": ["[[7, 4, 1], [8, 5, 2], [9, 6, 3]]", "[[3, 1], [4, 2]]", "[[1]]"]
        },
        {
            "id": 17,
            "title": "Tic Tac Toe",
            "difficulty": "Hard",
            "languages": ["javascript", "python", "java", "c", "cpp", "csharp", "go", "ruby", "swift"],
            "problem_statement": [
                "Problem:",
                "",
                "Create a function that takes a Tic-tac-toe board and returns \"X\" if the X's are placed in a way that there are three X's in a row or returns \"O\" if there are three O's in a row. If neither is true, return \"Tie\". Print the results of test cases to stdout.",
                "",
                "Examples:",
                "",
                "ticTacToe([[\"X\", \"O\", \"X\"], [\"X\", \"X\", \"X\"], [\"O\", \"X\", \"O\"]]) ➞ \"X\"",
                "ticTacToe([[\"O\", \"X\", \"O\"], [\"O\", \"O\", \"O\"], [\"X\", \"O\", \"X\"]]) ➞ \"O\"",
                "ticTacToe([[\"X\", \"O\", \"X\"], [\"O\", \"X\", \"O\"], [\"X\", \"O\", \"X\"]]) ➞ \"Tie\"",
                "",
                "Test Cases:",
                "",
                "ticTacToe([[\"X\", \"O\", \"X\"], [\"O\", \"X\", \"O\"], [\"O\", \"X\", \"X\"]])",
                "ticTacToe([[\"O\", \"O\", \"O\"], [\"O\", \"X\", \"\"], [\"X\", \"X\", \"X\"]])",
                "ticTacToe([[\"X\", \"X\", \"O\"], [\"O\", \"O\", \"\"], [\"X\", \"X\", \"O\"]])"
            ],
            "body": {
                "javascript": [
                    "const ticTacToe = (board) => {",
                    "    // Your code here",
                    "}",
                    "",
                    "console.log(ticTacToe([['X', 'O', 'X'], ['O', 'X', 'O'], ['O', 'X', 'X']]));",
                    "console.log(ticTacToe([['O', 'O', 'O'], ['O', 'X', ''], ['X', 'X', 'X']]));",
                    "console.log(ticTacToe([['X', 'X', 'O'], ['O', 'O', ''], ['X', 'X', 'O']]));"
                ],
                "python": [
                    "def ticTacToe(board):",
                    "    # Your code here",
                    "",
                    "print(ticTacToe([['X', 'O', 'X'], ['O', 'X', 'O'], ['O', 'X', 'X']]))",
                    "print(ticTacToe([['O', 'O', 'O'], ['O', 'X', ''], ['X', 'X', 'X']]))",
                    "print(ticTacToe([['X', 'X', 'O'], ['O', 'O', ''], ['X', 'X', 'O']]))"
                ],
                "java": [
                    "public class Program {",
                    "    public static String ticTacToe(String[][] board) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void main(String[] args) {",
                    "        System.out.println(ticTacToe(new String[][] {new String[] {\"X\", \"O\", \"X\"}, new String[] {\"O\", \"X\", \"O\"}, new String[] {\"O\", \"X\", \"X\"}}));",
                    "        System.out.println(ticTacToe(new String[][] {new String[] {\"O\", \"O\", \"O\"}, new String[] {\"O\", \"X\", \"\"}, new String[] {\"X\", \"X\", \"X\"}}));",
                    "        System.out.println(ticTacToe(new String[][] {new String[] {\"X\", \"X\", \"O\"}, new String[] {\"O\", \"O\", \"\"}, new String[] {\"X\", \"X\", \"O\"}}));",
                    "    }",
                    "}"
                ],
                "c": [
                    "char* ticTacToe(char* board[3][3]) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    char* board1[3][3] = {\"X\", \"O\", \"X\", \"O\", \"X\", \"O\", \"O\", \"X\", \"X\"};",
                    "    char* board2[3][3] = {\"O\", \"O\", \"O\", \"O\", \"X\", \"\", \"X\", \"X\", \"X\"};",
                    "    char* board3[3][3] = {\"X\", \"X\", \"O\", \"O\", \"O\", \"\", \"X\", \"X\", \"O\"};",
                    "    printf(\"%s\\n\", ticTacToe(board1));",
                    "    printf(\"%s\\n\", ticTacToe(board2));",
                    "    printf(\"%s\\n\", ticTacToe(board3));",
                    "}"
                ],
                "cpp": [
                    "string ticTacToe(vector<vector<string>> board) {",
                    "    // Your code here",
                    "}",
                    "",
                    "int main() {",
                    "    vector<vector<string>> board1 = {vector<string> {\"X\", \"O\", \"X\"}, vector<string> {\"O\", \"X\", \"O\"}, vector<string> {\"O\", \"X\", \"X\"}};",
                    "    vector<vector<string>> board2 = {vector<string> {\"O\", \"O\", \"O\"}, vector<string> {\"O\", \"X\", \"\"}, vector<string> {\"X\", \"X\", \"X\"}};",
                    "    vector<vector<string>> board3 = {vector<string> {\"X\", \"X\", \"O\"}, vector<string> {\"O\", \"O\", \"\"}, vector<string> {\"X\", \"X\", \"O\"}};",
                    "    cout << ticTacToe(board1) << endl;",
                    "    cout << ticTacToe(board2) << endl;",
                    "    cout << ticTacToe(board3) << endl;",
                    "}"
                ],
                "csharp": [
                    "public class Program {",
                    "    public static string TicTacToe(string[][] board) {",
                    "        // Your code here",
                    "    }",
                    "",
                    "    public static void Main(string[] args) {",
                    "        Console.WriteLine(TicTacToe(new string[][] {new string[] {\"X\", \"O\", \"X\"}, new string[] {\"O\", \"X\", \"O\"}, new string[] {\"O\", \"X\", \"X\"}}));",
                    "        Console.WriteLine(TicTacToe(new string[][] {new string[] {\"O\", \"O\", \"O\"}, new string[] {\"O\", \"X\", \"\"}, new string[] {\"X\", \"X\", \"X\"}}));",
                    "        Console.WriteLine(TicTacToe(new string[][] {new string[] {\"X\", \"X\", \"O\"}, new string[] {\"O\", \"O\", \"\"}, new string[] {\"X\", \"X\", \"O\"}}));",
                    "    }",
                    "}"
                ],
                "go": [
                    "package main",
                    "",
                    "import (",
                    "    \"fmt\"",
                    ")",
                    "",
                    "func ticTacToe(board [][]string) string {",
                    "    // Your code here",
                    "}",
                    "",
                    "func main() {",
                    "    board1 := [][]string{[]string{\"X\", \"O\", \"X\"}, []string{\"O\", \"X\", \"O\"}, []string{\"O\", \"X\", \"X\"}}",
                    "    board2 := [][]string{[]string{\"O\", \"O\", \"O\"}, []string{\"O\", \"X\", \"\"}, []string{\"X\", \"X\", \"X\"}}",
                    "    board3 := [][]string{[]string{\"X\", \"X\", \"O\"}, []string{\"O\", \"O\", \"\"}, []string{\"X\", \"X\", \"O\"}}",
                    "    fmt.Println(ticTacToe(board1))",
                    "    fmt.Println(ticTacToe(board2))",
                    "    fmt.Println(ticTacToe(board3))",
                    "}"
                ],
                "ruby": [
                    "def tic_tac_toe(board)",
                    "    # Your code here",
                    "end",
                    "",
                    "puts tic_tac_toe([['X', 'O', 'X'], ['O', 'X', 'O'], ['O', 'X', 'X']])",
                    "puts tic_tac_toe([['O', 'O', 'O'], ['O', 'X', ''], ['X', 'X', 'X']])",
                    "puts tic_tac_toe([['X', 'X', 'O'], ['O', 'O', ''], ['X', 'X', 'O']])"
                ],
                "swift": [
                    "func ticTacToe(board: [[String]]) -> String {",
                    "    // Your code here",
                    "}",
                    "",
                    "print(ticTacToe(board: [[\"X\", \"O\", \"X\"], [\"O\", \"X\", \"O\"], [\"O\", \"X\", \"X\"]]));",
                    "print(ticTacToe(board: [[\"O\", \"O\", \"O\"], [\"O\", \"X\", \"\"], [\"X\", \"X\", \"X\"]]));",
                    "print(ticTacToe(board: [[\"X\", \"X\", \"O\"], [\"O\", \"O\", \"\"], [\"X\", \"X\", \"O\"]]));"
                ]
            },
            "answer": ["\"X\"", "\"O\"", "\"Tie\""]
        }
    ],
    "start_comment": {
        "javascript": "/*",
        "python": "'''",
        "java": "/*",
        "c": "/*",
        "cpp": "/*",
        "csharp": "/*",
        "go": "/*",
        "ruby": "=begin",
        "swift": "/*",
        "php": "/*"
    },
    "end_comment": {
        "javascript": "*/",
        "python": "'''",
        "java": "*/",
        "c": "*/",
        "cpp": "*/",
        "csharp": "*/",
        "go": "*/",
        "ruby": "=end",
        "swift": "*/",
        "php": "*/"
    }
}